# Android APK build toolchain file.
# This toolchain file differs from most others and should not be seen as an example.
# This is because the android NDK has a perfectly usable toolchain file already,
# and thus we use that.
# This file just facilitates in setting up the SDK/NDK if we do not have it yet.


# We need the following things:
# - Android SDK, with:
#   - build-tools (aapt, dx, zipalign)
#   - platform/android-{target_api} (for android.jar)
# - java JDK with:
#   - javac compiler for java 8 
#   - jarsigner
# - SDL2 build with the toolchain
# - a signing key
# This toolchain file is designed to setup everything if it's not supplied by the user, with the exception of the java JDK

set(ANDROID_SDK_PATH "" CACHE PATH "Location of the android SDK installation.")
set(ANDROID_API_MIN "16" CACHE STRING "Minimal API version for android build, any device below this version is not supported.")
set(ANDROID_API_TARGET "26" CACHE STRING "Targeting API version for android, any features above this version cannot be used.")


#################################################################################

# Configuration options for the NDK CMake toolchain file.
set(ANDROID_ABI "armeabi-v7a")
set(ANDROID_PLATFORM "android-${ANDROID_API_MIN}")

find_program(UNZIP unzip)
find_program(PATCH patch)

find_package(Java 1.8 COMPONENTS Development JarSigner REQUIRED)

if(CMAKE_HOST_WIN32)
    set(HOST_EXE ".exe")
    set(HOST_BAT ".bat")
endif()

function(execute_process_ex)
    execute_process(${ARGV} RESULT_VARIABLE RES)
    if(RES)
        message(FATAL_ERROR "Failed to execute: ${ARGV}")
    endif()
endfunction()

if(ANDROID_SDK_PATH STREQUAL "")
    set(ANDROID_SDK_PATH "${CMAKE_CURRENT_LIST_DIR}/android/sdk/")
    set(ANDROID_BUILD_TOOLS_VERSION "29.0.0")
    if(NOT EXISTS "${ANDROID_SDK_PATH}/tools/bin/sdkmanager${HOST_BAT}")
        file(WRITE "${ANDROID_SDK_PATH}/licenses/android-sdk-license" "24333f8a63b6825ea9c5514f83c2829b004d1fee")
        if(CMAKE_HOST_WIN32)
            file(DOWNLOAD https://dl.google.com/android/repository/sdk-tools-windows-4333796.zip "${ANDROID_SDK_PATH}/sdk-tools.zip" SHOW_PROGRESS)
        else()
            file(DOWNLOAD https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip "${ANDROID_SDK_PATH}/sdk-tools.zip" SHOW_PROGRESS EXPECTED_HASH SHA256=92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9)
        endif()
        execute_process_ex(COMMAND ${UNZIP} sdk-tools.zip WORKING_DIRECTORY "${ANDROID_SDK_PATH}")
    endif()
    if(NOT EXISTS "${ANDROID_SDK_PATH}/platforms/android-${ANDROID_API_TARGET}")
        execute_process_ex(COMMAND "${ANDROID_SDK_PATH}/tools/bin/sdkmanager${HOST_BAT}" "platforms\;android-${ANDROID_API_TARGET}")
    endif()
    if(NOT EXISTS "${ANDROID_SDK_PATH}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}")
        execute_process_ex(COMMAND "${ANDROID_SDK_PATH}/tools/bin/sdkmanager${HOST_BAT}" "build-tools\;${ANDROID_BUILD_TOOLS_VERSION}")
    endif()
    if(NOT EXISTS "${ANDROID_SDK_PATH}/ndk-bundle")
        execute_process_ex(COMMAND "${ANDROID_SDK_PATH}/tools/bin/sdkmanager${HOST_BAT}" "ndk-bundle")
    endif()
else()
    file(GLOB ANDROID_BUILD_TOOLS_VERSION LIST_DIRECTORIES true "${ANDROID_SDK_PATH}/build-tools/*.*.*")
    get_filename_component(ANDROID_BUILD_TOOLS_VERSION "${ANDROID_BUILD_TOOLS_VERSION}" NAME)
    if(NOT EXISTS "${ANDROID_SDK_PATH}/platforms/android-${ANDROID_API_TARGET}")
        message(FATAL_ERROR "Missing android platform in supplied android SDK: android-${ANDROID_API_TARGET}")
    endif()
endif()
set(AAPT "${ANDROID_SDK_PATH}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aapt")
set(DX "${ANDROID_SDK_PATH}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/dx${HOST_BAT}")
set(ANDROID_PLATFORM_JAR "${ANDROID_SDK_PATH}/platforms/android-${ANDROID_API_TARGET}/android.jar")

set(SDL_SRC_PATH "${CMAKE_CURRENT_LIST_DIR}/android/SDL/source")
set(SDL_INSTALL_PATH "${CMAKE_CURRENT_LIST_DIR}/android/SDL/install")
if(NOT EXISTS "${SDL_SRC_PATH}")
    file(DOWNLOAD https://www.libsdl.org/release/SDL2-2.0.9.zip "${CMAKE_CURRENT_LIST_DIR}/android/SDL/SDL2_src.zip" SHOW_PROGRESS)
    execute_process_ex(COMMAND ${UNZIP} SDL2_src.zip WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/android/SDL")
    file(RENAME "${CMAKE_CURRENT_LIST_DIR}/android/SDL/SDL2-2.0.9" "${CMAKE_CURRENT_LIST_DIR}/android/SDL/source")
    execute_process_ex(COMMAND ${PATCH} -p1 -i "${CMAKE_CURRENT_LIST_DIR}/../../android/sdl2.patch" WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/android/SDL/source")
endif()
if(NOT EXISTS "${SDL_INSTALL_PATH}")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/android/SDL/build")
    execute_process_ex(
        COMMAND "${CMAKE_COMMAND}" "${SDL_SRC_PATH}" "-G" "${CMAKE_GENERATOR}" "-DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}" "-DCMAKE_TOOLCHAIN_FILE=${ANDROID_SDK_PATH}/ndk-bundle/build/cmake/android.toolchain.cmake" "-DANDROID_ABI=${ANDROID_ABI}" "-DANDROID_PLATFORM=${ANDROID_PLATFORM}" "-DCMAKE_INSTALL_PREFIX=${SDL_INSTALL_PATH}"
        WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/android/SDL/build")
    execute_process_ex(
        COMMAND "${CMAKE_MAKE_PROGRAM}" "install"
        WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/android/SDL/build")
endif()
set(SDL2_DIR "${SDL_INSTALL_PATH}/lib/cmake/SDL2")

include("${ANDROID_SDK_PATH}/ndk-bundle/build/cmake/android.toolchain.cmake")
# We need to add a small thing here, or else the compiler checks fail, as those run with less configuration options enabled.
list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES ANDROID_SDK_PATH)


# Macro to build the android apk
macro(android_apk NAME ASSETS_FOLDER)
    configure_file("${SP2_DIR}/android/AndroidManifest.xml.in" "${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml")
    configure_file("${SP2_DIR}/android/SDLActivity.java.in" "${CMAKE_CURRENT_BINARY_DIR}/java_source/sp2/${NAME}/SDLActivity.java")
    # TODO: Generate icon resouces
    file(COPY "${SDL_SRC_PATH}/android-project/app/src/main/res/" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/android_resources")
    # Generate the R.java file
    add_custom_command(
        OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/java_source/sp2/${NAME}/R.java"
        COMMAND "${AAPT}" ARGS package -m -J "${CMAKE_CURRENT_BINARY_DIR}/java_source" -M "${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml" -S "${CMAKE_CURRENT_BINARY_DIR}/android_resources" -I "${ANDROID_PLATFORM_JAR}"
        DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml"
    )
    # Generate apk with resource files and manifest, but nothing else
    # Compile the java sources (TODO, warning about bootstrap classpath, rt.jar wrong version)
    file(GLOB JAVA_SOURCES "${SDL_SRC_PATH}/android-project/app/src/main/java/org/libsdl/app/*.java")
    list(APPEND JAVA_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/java_source/sp2/${NAME}/R.java")
    list(APPEND JAVA_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/java_source/sp2/${NAME}/SDLActivity.java")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/java_compiled/")
    add_custom_command(
        OUTPUT "java_compiled/sp2/Template/R.class"
        COMMAND ${Java_JAVAC_EXECUTABLE} ARGS -source 1.7 -target 1.7 -classpath "${ANDROID_PLATFORM_JAR}" ${JAVA_SOURCES} -d "${CMAKE_CURRENT_BINARY_DIR}/java_compiled/"
        DEPENDS ${JAVA_SOURCES}
    )
    # Convert sources into dex file
    add_custom_command(
        OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/classes.dex"
        COMMAND "${DX}" ARGS "--dex" "--output=${CMAKE_CURRENT_BINARY_DIR}/apk_contents/classes.dex" "${CMAKE_CURRENT_BINARY_DIR}/java_compiled/"
        DEPENDS "java_compiled/sp2/Template/R.class"
    )

    file(COPY "${SDL_INSTALL_PATH}/lib/libSDL2.so" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/lib/${ANDROID_ABI}/")
    file(COPY "${SDL_INSTALL_PATH}/lib/libhidapi.so" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/lib/${ANDROID_ABI}/")
    add_custom_command(
        OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/lib/${ANDROID_ABI}/libmain.so"
        COMMAND "${CMAKE_COMMAND}" ARGS -E copy "$<TARGET_FILE:main>" "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/lib/${ANDROID_ABI}/libmain.so"
        DEPENDS "$<TARGET_FILE:main>"
    )

    set(APK "${CMAKE_CURRENT_BINARY_DIR}/${NAME}.apk.unsigned")
    file(COPY "${ASSETS_FOLDER}" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/assets/")
    file(GLOB_RECURSE ASSETS LIST_DIRECTORIES false RELATIVE "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/" "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/assets/*")
    add_custom_command(
        OUTPUT "${APK}"
        COMMAND "${AAPT}" ARGS package -f -M "${CMAKE_CURRENT_BINARY_DIR}/AndroidManifest.xml" -S "${CMAKE_CURRENT_BINARY_DIR}/android_resources" -I "${ANDROID_PLATFORM_JAR}" -F "${APK}"
        COMMAND "${AAPT}" ARGS add "${APK}" classes.dex
        COMMAND "${AAPT}" ARGS add "${APK}" lib/${ANDROID_ABI}/libmain.so lib/${ANDROID_ABI}/libSDL2.so lib/${ANDROID_ABI}/libhidapi.so
        COMMAND "${AAPT}" ARGS add "${APK}" ${ASSETS}
        WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/"
        DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/classes.dex" "${CMAKE_CURRENT_BINARY_DIR}/apk_contents/lib/${ANDROID_ABI}/libmain.so"
    )
    add_custom_target(apk ALL DEPENDS "${APK}")

    # Sign and align the apk
    #KEY_STORE_PASSWORD=ee_pass jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $HOME/android_ee_key.keystore -storepass:env KEY_STORE_PASSWORD -keypass:env KEY_STORE_PASSWORD $TARGET EmptyEpsilon
    #rm -rf test.apk
    #$ZIPALIGN 4 $TARGET test.apk
endmacro()
